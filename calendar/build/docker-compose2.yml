version: "3.7"
services:
   
    db:
      image: postgres:12.0-alpine
      container_name: container-db
      env_file:
        - ./db/.env        
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}          
      ports:
        - 5432:5432
      networks:
        - net
      healthcheck:
        test: ["CMD", "pg_isready -U ${POSTGRES_USER}"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s
    
    migrate:
      container_name: container-migrate
      image: migrate/migrate
      env_file:
        - ./db/.env          
      depends_on:
        - db    
      volumes:
         - ./migrations:/migrations
      command: -path /migrations -database postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable up
      restart: on-failure
      networks:
        - net

    rabbitmq:
      image: rabbitmq:3.8-management-alpine
      container_name: rmq
      ports:
        - 5672:5672
        - 15672:15672
      expose:
        - 5672
        - 15672
      environment:
        - RABBITMQ_DEFAULT_USER=guest
        - RABBITMQ_DEFAULT_PASS=guest        
      restart: on-failure
      networks:
        - net
      healthcheck:
        test: [ "CMD", "nc", "-z", "localhost", "5672" ]
        interval: 5s
        timeout: 15s
        retries: 1
    
    scheduler:
      image: puzanovma/scheduler
      container_name: scheduler
      build:
        context: ../.
        dockerfile: ./build/scheduler/scheduler.Dockerfile
      env_file:
        - ./.env             
      environment:
        - DB_HOST=db
        - QUEUE_HOST=rabbitmq
      networks:
        - net
      depends_on:
        - db
        - migrate        
        - rabbitmq   
      restart: on-failure    

networks:
  net:
    driver: bridge